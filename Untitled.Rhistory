shiny::runApp()
runApp()
runApp()
runApp()
library(knitr)
library(shiny)
library(rmarkdown)
library(ggplot2)
library(ggvis)
install.packages(c(knitr,rmarkdown,ggvis))
install.packages(knitr)
install.packages(c("knitr","rmarkdown","ggvis"))
install.packages(c("knitr", "rmarkdown", "ggvis"))
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
$ sudo apt-get install r-base
install.packages('rsconnect')
rsconnect::setAccountInfo(name='catshiny',
token='41A43B1C9305CDD0DAD91E3A5CD43B17',
secret='<SECRET>')
rsconnect::setAccountInfo(name='catshiny',
token='41A43B1C9305CDD0DAD91E3A5CD43B17',
secret='CEhLNhASHzn4rSgH44Af7esIZDJPqiZ7i+aqBLt+')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
install.packages(c('ggplot2', 'shiny'))
install.packages(c("ggplot2", "shiny"))
shiny::runApp()
runApp()
runApp()
install.packages("NVD3")
runApp()
shiny::runApp()
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
textInput("caption", "Caption", "Data Summary"),
verbatimTextOutput("value")
)
server <- function(input, output) {
output$value <- renderText({ input$caption })
}
shinyApp(ui, server)
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(verbatimTextOutput)
help(??verbatimTextOutput)
help("verbatimTextOutput")
shiny::runApp()
runApp()
install.packages("DBI")
install.packages("PPostgreSQL")
install.packages("RPostgreSQL")
install.packages("RPostgreSQL")
shiny::runApp()
library(swirl)swirl()
library(swirl)
runApp()
install.packages("tm")
shiny::runGist('4383737'))
shiny::runGist('4383737')
main()
shiny::runGist('4383737')
install.packages("word cloud")
install.packages("wordcloud")
shiny::runGist('4383737')
if(require(tm)){
data(SOTU)
corp <- SOTU
corp <- tm_map(corp, removePunctuation)
corp <- tm_map(corp, content_transformer(tolower))
corp <- tm_map(corp, removeNumbers)
corp <- tm_map(corp, function(x)removeWords(x,stopwords()))
term.matrix <- TermDocumentMatrix(corp)
term.matrix <- as.matrix(term.matrix)
colnames(term.matrix) <- c("SOTU 2010","SOTU 2011")
comparison.cloud(term.matrix,max.words=40,random.order=FALSE)
commonality.cloud(term.matrix,max.words=40,random.order=FALSE)
}
warnings()
shiny::runGist('4383737')
runApp()
runApp()
runApp()
library("shiny")
library("XML")
library("stringr")
library("RCurl")
library("wordcloud")
library("tm")
shiny::runGist('4383737')
runApp()
runApp()
shiny::runApp()
runGist(9737637)
runGist(9737637)
runExample("08_html")
runApp()
runApp()
runApp()
library(shiny)
followed by
runGist(9737637)
shiny::runApp()
library(readr)
catIDF <- read_csv("~/R/CatShiny/www/catIDF.csv")
View(catIDF)
txt <- readLines("catTXT.txt")
txt <- readLines("~/R/CatShiny/www/catTXT.txt")
txt
strsplit(txt, " ")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
txt <- readLines("~/R/CatShiny/www/catTXT.txt")
library(readr)
catIDF <- read_csv("~/R/CatShiny/www/catIDF.csv")
View(catIDF)
txt <- readLines("~/R/CatShiny/www/catTXT.txt")
strsplit(txt, " ")
txtsplit<-strsplit(txt, " ")
txtsplit
runApp()
runApp()
txt[1]
length(txt)
runApp()
runApp()
txt <- readLines("~/R/CatShiny/www/catTXT.txt")
strsplit(txt, " ")
txt <- readLines("~/R/CatShiny/www/catTXT.txt")
txt[1]
length(txt)
wordL <- strsplit(txt, "[[:space:]]|[[:punct:]]")
wordL <- unlist(wordL)
wordL <- tolower(wordL)
wordL <- wordL[nchar(wordL) > 0]
wordL <- wordL[wordL != ""]
tokens <- length(wordL)
tokens
types <- length(unique(wordL))
types
types/tokens * 100
freqL <- sort(table(wordL), decreasing = TRUE)
freqL[1:5]
subfreq <- freqL[1:10]
title = "Word Frequency Distribution"
xlabel = "Word"
ylabel = "Frequency"
barplot(subfreq, main = title, xlab = xlabel, ylab = ylabel)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
txt<-(~/Users/macbook/R/CatShiny/catTXT.txt)
txt<-(/Users/macbook/R/CatShiny/catTXT.txt)
txt<-readLines(~/Users/macbook/R/CatShiny/catTXT.txt)
txt <- readLines(~/Users/macbook/R/CatShiny/catTXT.txt)
txt <- readLines("~/Users/macbook/R/CatShiny/catTXT.txt")
txt <- ("~/Users/macbook/R/CatShiny/catTXT.txt")
txt <- ("/Users/macbook/R/CatShiny/catTXT.txt")
txt <- readLines("~/CatShiny/catTXT.txt")
txt <- readLines("~/R/CatShiny/catTXT.txt")
txt <- readLines("~/R/CatShiny/www/catTXT.txt")
length(txt)
wordL <- strsplit(txt, "[[:space:]]|[[:punct:]]")
wordL <- unlist(wordL)
library(readr)
catIDF <- read_csv("~/R/CatShiny/www/catIDF.csv")
View(catIDF)
write.csv(tweets, file = "newfile", row.names = TRUE, sep = ',', col.names = TRUE)
write.csv(txt, file = "newfile", row.names = TRUE, sep = ',', col.names = TRUE)
write.table(wordL, file = "test.CSV", sep = ",")
read.csv(file = "test.CSV")
Cat_test_list[Cat_test_list$animal %in% Cat_compare$test,]
wordL[wordL$x %in% catIDF$word,]
wordL[wordL$x %in% catIDF$word,]
file[file$x %in% catIDF$word,]
RtoCSV<-read.csv(file = "test.CSV")
RtoCSV[RtoCSV$x %in% catIDF$word,]
install.packages("proxy")
weightTf(RtoCSV)
library(tm)
weightTf(RtoCSV)
weightTf(wordL)
termFreq(RtoCSV)
termFreq(doc,"~/R/CatShiny/www/catTXT.txt")
termFreq(wordL,"~/R/CatShiny/www/catTXT.txt")
termFreq(wordL,words)
termFreq(doc, control = list())
termFreq(wordL, control = list())
termFreq(RtoCSV, control = list())
termFreq(RtoCSV, control = list())
catTF<-termFreq(txt, control = list())
catTF
realtxt <- readLines("~/R/CatShiny/www/Resveratrol_in_cardiovascular_health_and_disease.txt")
catTF<-termFreq(realtxt, control = list())
catTF
write.table(catTF, file = "test.CSV", sep = ",")
write.table(catTF, file = "artres.CSV", sep = ",")
write.csv(catTF, file = "newfile", row.names = TRUE, sep = ',', col.names = TRUE)
write.csv(catTF, file = "newfile", row.names = TRUE, sep = ',', col.names = TRUE)
sum(catTF)
termFreq(wordL, control = list())
xx<-termFreq(wordL, control = list())
sum(termFreq(wordL, control = list()))
termFreq(["cat"], control = list())
termFreq(c("cat"), control = list())
termFreq(c("cat","cat"), control = list())
termFreq(c("cat","cat","dog"), control = list())
a<-termFreq(c("cat","cat","dog"), control = list())
a/sum(a)
termFreq(wordL, control = list())
termFreq(wordL, control = list())/sum(termFreq(wordL, control = list()))
catTFx<-termFreq(wordL, control = list())/sum(termFreq(wordL, control = list()))
catTFx<-(termFreq(wordL, control = list())/sum(termFreq(wordL, control = list())))
a<-termFreq(wordL, control = list())
a/sum(a)
a[a$1 %in% catIDF$word,]
a[a$x %in% catIDF$word,]
ta<-t(a)
ta
write.csv(a, file = "newfile", row.names = TRUE, sep = ',', col.names = TRUE)
write.csv(a, file = "newfile", row.names = NA, sep = ',', col.names = NA)
write.csv(a, file = "newfile", row.names = NA, sep = ',')
a[a$x %in% catIDF$word,]
a[a %in% catIDF$word,]
RtoCSV[RtoCSV$x %in% catIDF$word,]
a[a$x %in% catIDF$word,]
a
a[a %in% catIDF$word,]
a[a %in% catIDF$word,]
head(a)
head(a)
title(a)
row.names(a)
[row.names(a) %in% catIDF$word,]
row.names(a) %in% catIDF$word
a[row.names(a) %in% catIDF$word]
a[row.names(a) %in% catIDF$word,]
a[row.names(a) %in% catIDF$word]
catIDF$word
a
catIDF$idsf
catIDF$idf
catIDF$word
catIDF$word[catIDF$word row.names(a)]
[catIDF$word row.names(a)]
catIDF$word[catIDF$word %in% row.names(a)]
catIDF$idf[catIDF$word %in% row.names(a)]
a<-c("cat","CXCR5","dog")
catIDF$idf[catIDF$word %in% row.names(a)]
catIDF$idf[catIDF$word %in% row.names(a)]
a
catIDF$idf[catIDF$word %in% row.names(a)]
a
termFreq(a)
a<-termFreq(a)
catIDF$idf[catIDF$word %in% row.names(a)]
catIDF$word[catIDF$word %in% row.names(a)]
a
catIDF$word %in% row.names(a)
catIDF$word
a<-termFreq(c("Cat"))
catIDF$word %in% row.names(a)
a<-termFreq(c("cat"))
catIDF$word %in% row.names(a)
a<-termFreq(c("CXCR5"))
catIDF$word %in% row.names(a)
row.names(a)
catIDF$word
catIDF$word %in% "a"
catIDF$word %in% "cat"
catIDF$word %in% "crcx5"
catIDF$word %in% "cxcr5"
catIDF$word
catIDF$word %in% "For"
catIDF$word %in% "CXCR5"
catIDF$word %in% "cxcr5"
catIDF$word %in% "CXCR5"
lower("a")
lowess("a")
"a".lower
a
catIDF$word %in% "crcx5"
sapply(a,tolower)
a
a<-termFreq(c("Cat"))
a<-termFreq(sapply(c("Cat","word","CRCX5","cat"),tolower))
a
catIDF$word %in% a
sapply(catIDF$word,tolower) %in% a
sapply(catIDF$word,tolower) %in% a
a
sapply(catIDF$word,tolower) %in% row.names(a)
a
a<-termFreq(sapply(c("Cat","word","CXCR5","cat"),tolower))
sapply(catIDF$word,tolower) %in% row.names(a)
catIDF$word(sapply(catIDF$word,tolower) %in% row.names(a))
catIDF$word[sapply(catIDF$word,tolower) %in% row.names(a)]
catIDF$idf[sapply(catIDF$word,tolower) %in% row.names(a)]
[catIDF$word[sapply(catIDF$word,tolower) %in% row.names(a)],catIDF$idf[sapply(catIDF$word,tolower) %in% row.names(a)]]
(catIDF$word[sapply(catIDF$word,tolower) %in% row.names(a)],catIDF$idf[sapply(catIDF$word,tolower) %in% row.names(a)])
cat_of_row<-catIDF$word[sapply(catIDF$word,tolower) %in% row.names(a)]
cat_of_col<-catIDF$idf[sapply(catIDF$word,tolower) %in% row.names(a)]
Help(%in%)
help(%in%)
help("%in%")
help("sapply")
termFreq(txt,control = list())
result_TFIDF <- x
catTF<-termFreq(txt,control = list())
txt <- readLines("~/R/CatShiny/www/catTXT.txt")
catTF<-termFreq(txt,control = list())
catTF
catIDF$word[sapply(catIDF$word,tolower) %in% row.names(catTF)]
catTF/sum(catTF)
cat_TF=catTF/sum(catTF)
cat_TF<-catTF/sum(catTF)
View(catIDF)
cat_IDF <- read.csv("catIDF.csv",header=F)
cat_IDF <- read.csv("~/R/CatShiny/www/catIDF.csv",header=F)
as.character(cat_IDF)
c(1,2)*c(5,8)
c(1,2)*c(5,8,23)
c(1,2,134)*c(5,8,23)
cat_TF*c(1,2,134)
catIDF$word[sapply(catIDF$word,tolower) %in% row.names(catTF)]
cat_of_row<-catIDF$word[sapply(catIDF$word,tolower) %in% row.names(a)]
cat_of_row
catIDF$idf[sapply(catIDF$word,tolower) %in% row.names(a)]
catIDF$idf[sapply(catIDF$word,tolower) %in% row.names(a)]*a
catIDF$idf[sapply(catIDF$word,tolower) %in% row.names(a)]*catTF
catIDF$idf[sapply(catIDF$word,tolower) %in% row.names(a)]*cat_TF
catIDF$idf[sapply(catIDF$word,tolower) %in% row.names(a)]
cat_TF
catIDF$idf[sapply(catIDF$word,tolower) %in% row.names(a)]*cat_TF
catIDF$idf[sapply(catIDF$word,tolower) %in% row.names(a)]
c(1,2)*c(3,5,7,8)
catIDF$idf[sapply(catIDF$word,tolower) %in% row.names(a)]
View(cat_IDF)
catIDF$word %in% cat_TF
cat_TF %in% catIDF$word
catTF %in% catIDF$word
cat_TF %in% catIDF$word
cat_TF
row.names(cat_TF)%in% catIDF$word
row.names(cat_TF) %in% catIDF$word
cat_TF
cat_TF( row.names(cat_TF) %in% catIDF$word )
cat_TF[row.names(cat_TF) %in% catIDF$word]
cat_TF[row.names(cat_TF) %in% catIDF$word]*catIDF
cat_TF[row.names(cat_TF) %in% catIDF$word]*catIDF$idf
cat_TF[row.names(cat_TF) %in% catIDF$word]
cat_TF[sapply(row.names(cat_TF),tolower)  %in% catIDF$word]
cat_TF[sapply(row.names(cat_TF),tolower)  %in% row.names(catIDF$word)]
cat_TF[row.names(cat_TF) %in% catIDF$word]
cat_IDF
cat_TF
row.names(cat_TF) %in% catIDF$word
cat_TF[row.names(cat_TF) %in% catIDF$word]
cat_TF[row.names(cat_TF) %in% catIDF$word]*catIDF$idf
cat_TF[row.names(cat_TF) %in% catIDF$word] * catIDF[row.names(cat_TF) %in% catIDF$idf]
cat_TF[row.names(cat_TF) %in% catIDF$word] * catIDF[row.names(cat_TF) %in% catIDF$word]
catIDF[row.names(cat_TF) %in% catIDF$word]
cat_TF[row.names(cat_TF) %in% catIDF$word]
catIDF$idf[row.names(cat_TF) %in% catIDF$word]
catIDF$idf[row.names(cat_TF) %in% catIDF$word]
catIDF$word[row.names(cat_TF) %in% catIDF$word]
catIDF$word[row.names(catTF) %in% catIDF$word]
row.names(cat_TF)[row.names(catTF) %in% catIDF$word]
row.names(catTF)[row.names(catTF) %in% catIDF$word]
row.names(catTF)[row.names(catTF) %in% catIDF$word]
col.names(catTF)[row.names(catTF) %in% catIDF$word]
catTF[row.names(catTF) %in% catIDF$word]
cat_TF[row.names(cat_TF) %in% catIDF$word]
cat_TF[row.names(cat_TF) %in% catIDF$word]*catIDF$idf[row.names(cat_TF) %in% catIDF$word]
cat_TF[row.names(cat_TF) %in% catIDF$word] * catIDF$idf[cat_TF %in% catIDF$word]
cat_TF[row.names(cat_TF) %in% catIDF$word] * catIDF$idf[row.names(cat_TF) %in% catIDF$word]
catIDF$idf[row.names(cat_TF) %in% catIDF$word]
catIDF$idf[catIDF$word %in% row.names(cat_TF) ]
cat_TF[row.names(cat_TF) %in% catIDF$word] * catIDF$idf[catIDF$word %in% row.names(cat_TF) ]
cat_TF[row.names(cat_TF) %in% catIDF$word] * catIDF$idf[catIDF$word %in% row.names(cat_TF)]
cat_TF[row.names(cat_TF) %in% catIDF$word]
catIDF$idf[catIDF$word %in% row.names(cat_TF)]
source('~/R/CatShiny/TF muti IDF.R')
tfidf
tfidf(c("cat"),cat_IDF)
tfidf(c("cat"),catIDF)
tfidf(c("cat","cat","a"),catIDF)
tfidf(c("cat","cat","dog"),catIDF)
catIDF
tfidf(c("cat","cat","Test"),catIDF)
tfidf(c("cat","cat","Test","test"),catIDF)
tfidf(c("cat","cat","Test","cake"),catIDF)
source('~/R/CatShiny/TF muti IDF.R')
tfidf(c("cat","cat","Test","cake"),catIDF)
catIDF
view(catIDF)
View(catIDF)
source('~/R/CatShiny/TF muti IDF.R')
tfidf(c("cat","cat","Test","cake"),catIDF)
source('~/R/CatShiny/TF muti IDF.R')
tfidf(c("cat","cat","Test","cake"),catIDF)
source('~/R/CatShiny/TF muti IDF.R')
tfidf(c("cat","cat","Test","cake"),catIDF)
source('~/R/CatShiny/TF muti IDF.R')
tfidf(c("cat","cat","Test","cake"),catIDF)
source('~/R/CatShiny/TF muti IDF.R')
tfidf(c("cat","cat","Test","cake"),catIDF)
source('~/R/CatShiny/TF muti IDF.R')
tfidf(c("cat","cat","Test","cake"),catIDF)
source('~/R/CatShiny/TF muti IDF.R')
tfidf(c("cat","cat","Test","cake"),catIDF)
source('~/R/CatShiny/TF muti IDF.R')
tfidf(c("cat","cat","Test","cake"),catIDF)
source('~/R/CatShiny/TF muti IDF.R')
source('~/R/CatShiny/TF muti IDF.R')
tfidf(c("cat","cat","Test","cake"),catIDF)
source('~/R/CatShiny/TF muti IDF.R')
tfidf(c("cat","cat","Test","cake"),catIDF)
source('~/R/CatShiny/TF muti IDF.R')
tfidf(c("cat","cat","Test","cake"),catIDF)
source('~/R/CatShiny/TF muti IDF.R')
tfidf(c("cat","cat","Test","cake"),catIDF)
source('~/R/CatShiny/TF muti IDF.R')
tfidf(c("cat","cat","Test","cake"),catIDF)
source('~/R/CatShiny/TF muti IDF.R')
tfidf(c("cat","cat","Test","cake"),catIDF)
source('~/R/CatShiny/TF muti IDF.R')
tfidf(c("cat","cat","Test","cake"),catIDF)
rownames(a)
rownames(a)<-c("s")
rownames(a)<-c("s","c","r")
a
source('~/R/CatShiny/TF muti IDF.R')
tfidf(c("cat","cat","Test","cake"),catIDF)
source('~/R/CatShiny/TF muti IDF.R')
tfidf(c("cat","cat","Test","cake"),catIDF)
tfidf(c("cat","cat","Test","cake","and"),catIDF)
shiny::runApp()
runApp()
tfidf(c("cat","cat","Test","cake"),catIDF)
library(tm)
tfidf(c("cat","cat","Test","cake"),catIDF)
savehistory("~/R/CatShiny/Untitled.Rhistory")
